[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "pica-rs",
    "section": "",
    "text": "Start\n\nDas Projekt pica-rs ermöglicht eine effiziente Verarbeitung von bibliografischen Metadaten, die in PICA+, dem internen Format des OCLC-Katalogsystems, kodiert sind. Das Programm pica stellt unterschiedliche Kommandos zur Verfügung, um Daten auszuwählen, statistisch aufzubereiten oder für die Weiterverarbeitung in Data Science-Frameworks wie Polars (Python) oder der Sprache R nutzbar zu machen. Die Anwendung ist in der Programmiersprache Rust geschrieben und lässt sich unter den Betriebsystemen Linux, macOS und Windows verwenden. Die Kommandos lassen sich über die Standard-Datenströme (Kombination von verschiedenen Programmen mittels Unix-Pipelines) miteinander verketten, wodurch sich leicht Metadaten-Workflows erstellen und automatisieren lassen.\nDie Entwicklung von pica-rs wurde vom Referat Automatische Erschließungsverfahren; Netzpublikationen (AEN) der Deutsche Nationalbibliothek (DNB) initiert und wird dort für die Erstellung von Datenanalysen sowie für die Automatisierung von Workflows (Datenmanagement) im Rahmen der automatischen Inhaltserschließung genutzt. Weiterhin wird es zur Unterstützung der Forschungsarbeiten im KI-Projekt sowie für diverse andere Datenanalysen innerhalb der DNB eingesetzt.",
    "crumbs": [
      "Start"
    ]
  },
  {
    "objectID": "install.html",
    "href": "install.html",
    "title": "Installation",
    "section": "",
    "text": "Installation unter Linux\nDas Kommandozeilen-Tool pica lässt sich unter den Betriebssystemen Linux, macOS und Windows nutzen. Folgend wird die Installation sowie Einrichtung und Konfiguration des Tools beschrieben. Die Zeichenkette X.Y.Z ist ein Platzhalter für eine konkrete pica-rs Version und muss in dem Befehl entsprechend ersetzt werden.\nAbhängig von der genutzten Linux-Distribution, gibt es unterschiedliche Möglichkeiten der Installation. Vorgefertigte Releases stehen auf der Plattform GitHub zum Download bereit.",
    "crumbs": [
      "Erste Schritte",
      "Installation"
    ]
  },
  {
    "objectID": "install.html#installation-unter-linux",
    "href": "install.html#installation-unter-linux",
    "title": "Installation",
    "section": "",
    "text": "Debian und Ubuntu\nUnter Debian GNU/Linux und Ubuntu Linux können fertige DEB-Pakete genutzt werden. Diese können mit dem dpkg-Programm installiert werden:\n$ dpkg -i pica_X.Y.Z-glibc2.35-1_amd64.deb\n\n\nRed Hat, SUSE und CentOS\nFür die Distributionen Red Hat Linux, SUSE Linux und CentOS Linux stehen fertige RPM-Pakete zum Download bereit, die sich mit dem rpm-Programm installieren lassen:\n$ rpm -i pica-X.Y.Z-glibc2.35-1.x86_64.rpm\n\n\nBinary Releases\nSoll pica nicht über einen Paketmanager installiert werden, stehen für die Zielarchitektur x86_64-unknown-linux-gnu mit den glibc-Versionen 2.28, 2.31 und 2.35 fertige Binary Releases zur Verfügung. Die glibc-Version des Systems lässt sich mit dem Aufruf ldd --version ermitteln.\nDas tar-Archiv enthält neben dem Tool pica auch weitere Dateien wie bspw. Shell-Skripte zur Befehlszeilenergänzung:\n$ tar -tf\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35.tar.gz\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/pica\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/README.md\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/pica.zsh\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/LICENSE\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/pica.fish\npica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/pica.bash\nEine systemweite Installation von pica in das Verzeichnis /usr/local/bin kann mit dem install erfolgen. Hierfür sind ggf. root-Rechte nötig:\n$ tar xfz pica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35.tar.gz\n$ sudo install -m755 pica-X.Y.Z-x86_64-unknown-linux-gnu-glibc2.35/pica \\\n      /usr/local/bin/pica",
    "crumbs": [
      "Erste Schritte",
      "Installation"
    ]
  },
  {
    "objectID": "install.html#installation-unter-macos",
    "href": "install.html#installation-unter-macos",
    "title": "Installation",
    "section": "Installation unter macOS",
    "text": "Installation unter macOS\nUnter macOS wird nur die Zielarchitektur x86_64-apple-darwin (macOS 10.7+, Lion+) unterstützt. Diese lässt sich analog wie unter Linux installieren:\n$ tar xfz pica-X.Y.Z-x86_64-apple-darwin.tar.gz\n$ install -m755  pica-X.Y.Z-x86_64-apple-darwin/pica /usr/local/bin/pica",
    "crumbs": [
      "Erste Schritte",
      "Installation"
    ]
  },
  {
    "objectID": "install.html#installation-unter-windows",
    "href": "install.html#installation-unter-windows",
    "title": "Installation",
    "section": "Installation unter Windows",
    "text": "Installation unter Windows\nUnter Windows (x86_64-pc-windows-gnu oder x86_64-pc-windows-msvc) kann das Programm direkt dem zip-Archiv entnommen werden. Nach einem Wechsel in das Verzeichnis, in dem sich die pica.exe befindet, kann das Programm direkt genutzt werden. Soll pica aus jedem beliebigen Verzeichnis heraus aufrufbar sein, dann muss der Installationspfad in der PATH-Umgebungsvariable mit aufgelistet werden.",
    "crumbs": [
      "Erste Schritte",
      "Installation"
    ]
  },
  {
    "objectID": "install.html#aus-dem-quellcode-installieren",
    "href": "install.html#aus-dem-quellcode-installieren",
    "title": "Installation",
    "section": "Aus dem Quellcode installieren",
    "text": "Aus dem Quellcode installieren\nDas Projekt lässt sich auch direkt aus den Quellen kompilieren. Hierfür wird eine aktuelle Rust-Version (&gt;= 1.74.1) mit dem Paketmanager cargo benötigt.\nDer aktuelle Entwicklungsstand lässt sich wie folgt installieren:\n$ git clone https://github.com/deutsche-nationalbibliothek/pica-rs.git\n$ cd pica-rs\n$ cargo build --release\nDas fertige pica-Programm liegt im Verzeichnis target/release/ und kann bspw. in das Verzeichnis /usr/local/bin installiert werden:\n$ install -m755 target/release/pica /usr/local/bin/pica\nWenn der Quellcode nicht benötigt wird, kann das Projekt auch direkt über den Paketmanager cargo installiert werden:\n$ # Installation der aktuellen Entwicklungsversion\n$ cargo install --git https://github.com/deutsche-nationalbibliothek/pica-rs \\\n     --branch main pica-cli\n\n$ # Installation der Version X.Y.Z\n$ cargo install --git https://github.com/deutsche-nationalbibliothek/pica-rs \\\n      --tag vX.Y.Z pica-cli\nDas fertige Programm befindet sich dann unter ~/.cargo/bin/pica.\n\nFeatures\nWird das Programm anhand der Quellen gebaut, können optionale Features aktiviert werden.Die folgenden Funktionen können mit der cargo-Option --features aktiviert werden:\n\nunstable, um die neuesten Funktionalitäten, die noch in der Entwicklung sind und für eine der nächsten Versionen vorgesehen sind, zu aktivieren\nund compat, um eine höhere Kompatibilität mit der Abfragesprache PICA Path zu erhalten.",
    "crumbs": [
      "Erste Schritte",
      "Installation"
    ]
  },
  {
    "objectID": "commands/invalid.html",
    "href": "commands/invalid.html",
    "title": "invalid",
    "section": "",
    "text": "Beispiel\nBei der Verarbeitung von PICA-Daten kann es vorkommen, dass Zeilen in der Eingabe nicht als normalisiertes PICA+ dekodiert werden können. Diese ungültigen Zeilen lassen sich bei vielen Kommandos mit der Option --skip-invalid / -s überspringen, wobei die Anzahl der übersprungenen Zeilen nicht angezeigt wird. Es ist zu empfehlen, die Anzahl invalider Datensätze zu kontrollieren und einer Prüfung zu unterziehen, um diese ggf. zu korrigieren. Das invalid-Kommando findet diese Zeilen in der Eingabe und gibt diese wieder auf der Standardausgabe (stdout) aus. Durch Angabe der Option --output / -o kann die Ausgabe in eine Datei geschrieben werden.\nDer folgende Befehl findet alle ungültigen Datensätze aus der Datei DUMP.dat.gz und schreibt diese Zeile in die Datei invalid.dat:",
    "crumbs": [
      "Kommandos",
      "invalid"
    ]
  },
  {
    "objectID": "commands/invalid.html#beispiel",
    "href": "commands/invalid.html#beispiel",
    "title": "invalid",
    "section": "",
    "text": "$ pica invalid DUMP.dat.gz -o invalid.dat",
    "crumbs": [
      "Kommandos",
      "invalid"
    ]
  }
]