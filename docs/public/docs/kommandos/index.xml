<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pica-rs</title>
    <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/</link>
    <description>Recent content on pica-rs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-DE</language>
    <atom:link href="https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/cat/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/cat/</guid>
      <description>cat # Das cat-Kommando liest Datensätze direkt von der Standardeingabe (stdin) oder aus Dateien ein und fügt diese zusammen. Die Ausgabe kann entweder in eine Datei oder in die Standardausgabe (stdout) geschrieben werden.&#xA;Beschreibung # Der wichtigste Anwendungsfall des Kommandos besteht in Kombination mit den Kommandos partition oder split, da mittels cat das Ergebnis von partition oder split (teil-)rückgängig gemacht werden kann. Häufig macht es Sinn, eine große Datei in viele kleinere Dateien anhand eines Kriteriums zu teilen und anschließend eine Teilmenge wieder zusammenzufügen.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/completions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/completions/</guid>
      <description>completions # Das completions-Kommando erzeugt Dateien, die Anweisungen enthalten, welche Argumente und Optionen des Toolkits für eine Shell zur Befehlszeilenergänzung verfügbar sind.&#xA;Beschreibung # Hinweis&#xA;Mit jeder neuen pica-Version können sich die Argumente und Optionen des command-line interface (CLI) ändern. Daher ist ein regelmäßiges Updaten der Skripte zu empfehlen.&#xA;Nachfolgend werden exemplarisch die Befehle gezeigt, die für die Einbindung in die jeweilige Shell nötig sind. Die Schritte sind vom System sowie der Nutzereinstellung abhängig und müssen ggf.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/convert/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/convert/</guid>
      <description>convert # Das convert-Kommando wird für die Konvertierung von und in andere Datenformate verwendet.&#xA;Hinweis: Das convert-Kommando befindet sich in der aktiven Entwicklung. Funktionalitäten können unvollständig oder fehlerhaft sein. Änderungen am command-line interface (CLI) sind nicht ausgeschlossen. Beschreibung # Das PICA-Format kann in verschiedene Datenformate serialisiert werden. Das convert-Kommando ermöglicht es, Datensätze von einem Format in ein anderes Format zu konvertieren. Es bietet insbesondere die Möglichkeit, Datensätze, die nicht in normalisiertem PICA+ vorliegen, nach PICA+ zu konvertieren, um sie durch andere Kommandos verarbeiten zu können.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/count/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/count/</guid>
      <description>count # Mithilfe des count-Kommandos lässt sich die Anzahl an Datensätzen (records), Feldern (fields) sowie Unterfeldern (subfields) ermitteln.&#xA;Beschreibung # Soll die Anzahl der Datensätze und deren Felder sowie Unterfelder ermittelt werden, kann dies mit dem count-Kommando erfolgen. Ungültige Datensätze können mit dem Flag --skip-invalid (bzw. -s) übersprungen werden. Im folgenden Beispiel werden drei Dateien eingelesen und eine Zusammenfassung auf der Konsole ausgegeben:&#xA;$ pica count -s DUMP.dat.gz records: 12 fields: 1035 subfields: 3973 Optionen # -s, --skip-invalid — überspringt jene Zeilen aus der Eingabe, die nicht dekodiert werden konnten.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/explode/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/explode/</guid>
      <description>explode # Mithilfe des explode-Kommandos lassen sich Datensätze in Lokal- bzw. Exemplardatensätze aufteilen.&#xA;Hinweis: Das explode-Kommando befindet sich in der aktiven Entwicklung. Funktionalitäten können unvollständig oder fehlerhaft sein. Änderungen am command-line interface (CLI) sind nicht ausgeschlossen. Beschreibung # Die Verarbeitung und Analyse von Datensätzen auf Lokal- bzw. Exemplarebene ist mitunter nur unzureichend möglich, da Filterausdrücke die Grenzen von untergeordneten Ebenen nicht respektiert. Abhilfe kann das explode-Kommando schaffen, das einen Datensatz in einzelne Lokal- bzw.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/filter/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/filter/</guid>
      <description>filter # Mithilfe des filter-Kommandos können Datensätze anhand eines Kriterums aus der Eingabe gefiltert werden.&#xA;Beschreibung # Das filter-Kommando bildet das Herzstück des Toolkits. Es ermöglicht es, aus einer (mitunter sehr großen) Datenmenge, bspw. dem Gesamtabzug des Katalogsystems, eine kleinere Menge effizient zu extrahieren, um sie anschließend weiterzuverarbeiten. Dies erfolgt über die Angabe eines Filterausdrucks, der darüber entscheidet, ob ein Datensatz in die Zielmenge eingeht oder nicht.&#xA;Im folgenden Beispiel werden alle Datensätze aus der Datei DUMP.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/frequency/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/frequency/</guid>
      <description>frequency # Mithilfe des Kommandos frequency lässt sich die Häufigkeitsverteilung aller Werte eines oder mehrerer Unterfelder bestimmen.&#xA;Beschreibung # Das Kommando frequency wird dazu genutzt, um die Häufigkeiten der Werte ein oder mehrerer Unterfelder zu bestimmen. Ist das zu untersuchende Feld bzw. Unterfeld wiederholbar, gehen alle Wertausprägungen eines Datensatzes in die Häufigkeitsverteilung ein. Die Ausgabe erfolgt standardmäßig im CSV-Format. Im folgenden Beispiel wird die Häufigkeitsverteilung des Unterfelds 002@.0 (Satzart) ermittelt:</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/hash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/hash/</guid>
      <description>hash # Mithilfe des Kommandos hash lässt sich eine Tabelle erzeugen, die in der ersten Spalte die IDN (Feld 003@.0) eines Datensatzes und in der zweiten Spalte den SHA-256 Hashwert enthält.&#xA;Beschreibung # Mitunter kommt es vor, dass eine regelmäßige und aufwändige Berechnung für Datensätze ausgeführt werden muss und es nicht praktikabel ist, die Berechnung über alle Datensätze durchzuführen. Mittels des hash-Kommandos können auf unterschiedlichen Abzügen die Hashwerte der Datensätze bestimmt werden.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/invalid/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/invalid/</guid>
      <description>invalid # Das invalid-Kommando findet Zeilen in der Eingabe, die nicht als normalisiertes PICA+ dekodiert werden konnten und somit ungültig sind.&#xA;Beschreibung # Bei der Verarbeitung von PICA-Daten kann es vorkommen, dass Zeilen in der Eingabe nicht dekodiert werden können. Diese ungültigen Zeilen lassen sich bei vielen Kommandos mit der Option --skip-invalid (bzw. -s) überspringen, wobei die Anzahl der übersprungenen Zeilen nicht angezeigt wird. Es kann aber empfehlenswert oder notwendig sein, die Anzahl invalider Datensätze zu kontrollieren und einer Prüfung zu unterziehen, um diese ggf.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/partition/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/partition/</guid>
      <description>partition # Mittels des partition-Kommandos lassen sich Datensätze anhand eines Unterfelds in Partitionen einteilen.&#xA;Beschreibung # Lassen sich Datensätze anhand von den Wertausprägungen in einem Unterfeld gruppieren, ist es mitunter hilfreich die Gesamtmenge der Datensätze in Partitionen aufzuteilen. Ist das Unterfeld, nach dem partitioniert werden soll, wiederholbar, sind die erzeugten Partitionen i.d.R. nicht disjunkt. Ein Datensatz der das Unterfeld nicht besitzt, geht in keine Partition ein.&#xA;Hinweis: Die Werte des Unterfelds ergeben den Dateinamen der Partition.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/print/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/print/</guid>
      <description>print # Das print-Kommando gibt Datensätze in einer menschenlesbaren Form aus.&#xA;Beschreibung # Mithilfe des print-Kommandos können Datensätze in einer menschenlesbaren Form auf dem Terminal ausgegeben oder in eine Datei geschrieben werden. Das Format ist an die Darstellung in der WinIBW angelehnt: Felder werden zeilenweise ausgegeben; zuerst wird das Feld (bspw. 003@), dann - sofern vorhanden - die Okkurrenz (bspw. /01), und schließlich die Liste von Unterfeldern ausgegeben. Dem Unterfeld-Code wird ein Dollarzeichen vorangestellt.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/slice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/slice/</guid>
      <description>slice # Das slice-Kommando schneidet einen zusammenhängenden Teilbereich aus der Eingabe aus.&#xA;Beschreibung # Mittels des slice-Kommandos kann ein zusammenhängender Teilbereich aus der Eingabe ausgeschnitten werden. Dabei wird der Teilbereich als halb-offenes Intervall angegeben, wobei die Positionen von 0 an gezählt werden. Beim Auftreten eines ungültigen Datensatzes wird die Position weitergezählt. Enthält bspw. die Eingabe 1.000 Zeilen, mit 990 Datensätzen und 10 ungültigen Zeilen, dann sind die Positionen von 0 bis 999 durchnummeriert.</description>
    </item>
    <item>
      <title></title>
      <link>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/split/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://deutsche-nationalbibliothek.github.io/pica-rs/book/docs/kommandos/split/</guid>
      <description>split # Das split-Kommando teilt eine Menge an Datensätzen in mehrere Dateien mit einer maximalen Anzahl pro Datei auf.&#xA;Beschreibung # Mithilfe des split-Kommandos können alle Datensätze aus der Eingabe in mehrere Dateien aufgeteilt werden, wobei jede Datei eine maximale Anzahl an Datensätzen nicht überschreitet. Ein Anwendungsfall für das Splitting könnte eine automatisierte Stapelverarbeitung oder die parallele Verarbeitung der entstandenen Dateien sein.&#xA;Der folgende Aufruf des split-Kommandos teilt die zwölf Datensätze der Eingabe (DUMP.</description>
    </item>
  </channel>
</rss>
