# check {.unnumbered}

::: {.callout-warning}
Das Kommando `check` ist eine `unstable`-Funktion, die sich noch in der
Entwicklung befindet und noch nicht in den Releases enthalten ist. Das
Kommando kann durch Aktivierung der `unstable`-Funktion beim Bauen aus
den Quellen aktiviert werden.
:::

Das `check`-Kommando erlaubt es Datensätze auf Konformität mit einem
Regelwerk zu überprüfen. In einer (oder mehreren) Konfigurationsdateien
können Regeln hinterlegt werden, gegen die jeder Datensatz überprüft
wird. Trifft einen Regel zu, wird diese Regelverletzung unter Angabe
der PPN (Feld `003@ $0`) des Datensatzes und ID der Regel in eine
Ausgabedatei geschrieben. Die ID einer Regel kann von den Nutzenden
frei gewählt werden.

Befinden sich die spezifizierten Regeln in der Datei `rules.toml`, kann
mit dem folgenden Befehl die Datei `DUMP.dat.gz` gegen das Regelwerk
überprüft werden. Die Ausgabe erfolgt im CSV-Format in die Ausgabedatei
`out.csv`:

```{.bash}
$ pica check -R rules.toml DUMP.dat.gz -o out.csv
```

Soll ein Regelwerk nur gegen eine Teilmenge der Eingabe getestet werden,
erfolgt dies durch Einschränkung des Geltungsbereichs (`scope`) mithilfe
eines Filterausdrucks:

```{.toml}
scope = '002@.0 =^ "T"'

[rule.XYZ]
...
````


## Checks

### Unicode

Der `unicode`-Check überprüft ob die Unterfeldwerte eines Datensatzes
gültige Unicode-Zeichenketten sind.

```{.toml}
[rule.UNICODE]
check = "unicode"
```
Optional kann überprüft werden, ob die Werte in eine der
Unicode-Normalformen `nfc`, `nfkc`, `nfd` oder `nfkd` vorliegen.

```{.toml}
[rule.UNICODE]
check = "unicode"
normalization = "nfd"
```

## Optionen

`-s`, `--skip-invalid`
: Überspringt jene Zeilen aus der Eingabe, die nicht dekodiert werden
konnten.

`-p`, `--progress`
: Anzeige des Fortschritts, der die Anzahl der eingelesenen gültigen
sowie invaliden Datensätze anzeigt. Das Aktivieren der Option erfordert
das Schreiben der Datensätze in eine Datei mittels `-o` bzw. `--output`.

`-R <filename>`, `--rule-set <filename>`
: Angabe eines Regelwerks gegen das die Datensätze aus der Eingabe
getestet werden.

`-o`, `--output`
: Angabe, in welche Datei die Ausgabe geschrieben werden soll.
Standardmäßig wird die Ausgabe in die Standardausgabe `stdout`
geschrieben.
