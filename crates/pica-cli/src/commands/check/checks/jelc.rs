use std::sync::LazyLock;

use bstr::ByteSlice;
use hashbrown::HashSet;
use pica_record::prelude::*;

#[derive(Debug, serde::Deserialize)]
#[serde(rename_all = "kebab-case")]
pub(crate) struct Jel {
    path: Path,

    #[serde(default = "super::strsim_threshold")]
    strsim_threshold: f64,

    #[serde(default)]
    case_ignore: bool,
}

macro_rules! codes {
    ($($x:expr),+ $(,)?) => (
        vec![$($x.as_bytes().to_vec()),*]
    );
}

// https://papers.ssrn.com/sol3/displayjel.cfm
static CODES: LazyLock<HashSet<Vec<u8>>> = LazyLock::new(|| {
    HashSet::from_iter(codes![
        "A00", "A10", "A11", "A12", "A13", "A14", "A19", "A20", "A21",
        "A22", "A23", "A29", "A30", "A31", "A32", "A33", "A39", "B00",
        "B10", "B11", "B12", "B13", "B14", "B15", "B16", "B17", "B19",
        "B20", "B21", "B22", "B23", "B24", "B25", "B26", "B27", "B29",
        "B30", "B31", "B32", "B40", "B41", "B49", "B50", "B51", "B52",
        "B53", "B54", "B55", "B59", "C00", "C01", "C02", "C10", "C11",
        "C12", "C13", "C14", "C15", "C18", "C19", "C20", "C21", "C22",
        "C23", "C24", "C25", "C26", "C29", "C30", "C31", "C32", "C33",
        "C34", "C35", "C36", "C38", "C39", "C40", "C41", "C42", "C43",
        "C44", "C45", "C46", "C49", "C50", "C51", "C52", "C53", "C54",
        "C55", "C57", "C58", "C59", "C60", "C61", "C62", "C63", "C65",
        "C67", "C68", "C69", "C70", "C71", "C72", "C73", "C78", "C79",
        "C80", "C81", "C82", "C83", "C87", "C88", "C89", "C90", "C91",
        "C92", "C93", "C99", "D00", "D01", "D02", "D03", "D04", "D10",
        "D11", "D12", "D13", "D14", "D15", "D16", "D18", "D19", "D20",
        "D21", "D22", "D23", "D24", "D25", "D26", "D29", "D30", "D31",
        "D33", "D39", "D40", "D41", "D42", "D43", "D44", "D45", "D46",
        "D47", "D49", "D50", "D51", "D52", "D53", "D57", "D58", "D59",
        "D60", "D61", "D62", "D63", "D64", "D69", "D70", "D71", "D72",
        "D73", "D74", "D78", "D79", "D80", "D81", "D82", "D83", "D84",
        "D85", "D86", "D87", "D89", "D90", "D91", "D92", "E00", "E01",
        "E02", "E03", "E10", "E11", "E12", "E13", "E14", "E16", "E17",
        "E19", "E20", "E21", "E22", "E23", "E24", "E25", "E26", "E27",
        "E29", "E30", "E31", "E32", "E37", "E39", "E40", "E41", "E42",
        "E43", "E44", "E47", "E49", "E50", "E51", "E52", "E58", "E59",
        "E60", "E61", "E62", "E63", "E64", "E65", "E66", "E69", "E70",
        "E71", "F00", "F01", "F02", "F10", "F11", "F12", "F13", "F14",
        "F15", "F16", "F17", "F18", "F19", "F20", "F21", "F22", "F23",
        "F24", "F29", "F30", "F31", "F32", "F33", "F34", "F35", "F36",
        "F37", "F38", "F39", "F40", "F41", "F42", "F43", "F44", "F45",
        "F47", "F49", "F50", "F51", "F52", "F53", "F54", "F55", "F59",
        "F60", "F61", "F62", "F63", "F64", "F65", "F66", "F68", "F69",
        "G00", "G01", "G02", "G10", "G11", "G12", "G13", "G14", "G15",
        "G17", "G18", "G19", "G20", "G21", "G22", "G23", "G24", "G28",
        "G29", "G30", "G31", "G32", "G33", "G34", "G35", "G38", "G39",
        "G40", "G41", "G50", "G51", "G52", "G53", "G59", "H00", "H10",
        "H11", "H12", "H13", "H19", "H20", "H21", "H22", "H23", "H24",
        "H25", "H26", "H27", "H29", "H30", "H31", "H32", "H39", "H40",
        "H41", "H42", "H43", "H44", "H49", "H50", "H51", "H52", "H53",
        "H54", "H55", "H56", "H57", "H59", "H60", "H61", "H62", "H63",
        "H68", "H69", "H70", "H71", "H72", "H73", "H74", "H75", "H76",
        "H77", "H79", "H80", "H81", "H82", "H83", "H84", "H87", "H89",
        "I00", "I10", "I11", "I12", "I13", "I14", "I15", "I18", "I19",
        "I20", "I21", "I22", "I23", "I24", "I25", "I26", "I28", "I29",
        "I30", "I31", "I32", "I38", "I39", "J00", "J01", "J08", "J10",
        "J11", "J12", "J13", "J14", "J15", "J16", "J17", "J18", "J19",
        "J20", "J21", "J22", "J23", "J24", "J26", "J28", "J29", "J30",
        "J31", "J32", "J33", "J38", "J39", "J40", "J41", "J42", "J43",
        "J44", "J45", "J46", "J47", "J48", "J49", "J50", "J51", "J52",
        "J53", "J54", "J58", "J59", "J60", "J61", "J62", "J63", "J64",
        "J65", "J68", "J69", "J70", "J71", "J78", "J79", "J80", "J81",
        "J82", "J83", "J88", "J89", "K00", "K10", "K11", "K12", "K13",
        "K14", "K15", "K16", "K19", "K20", "K21", "K22", "K23", "K24",
        "K25", "K29", "K30", "K31", "K32", "K33", "K34", "K35", "K36",
        "K37", "K38", "K39", "K40", "K41", "K42", "K49", "L00", "L10",
        "L11", "L12", "L13", "L14", "L15", "L16", "L17", "L19", "L20",
        "L21", "L22", "L23", "L24", "L25", "L26", "L29", "L30", "L31",
        "L32", "L33", "L38", "L39", "L40", "L41", "L42", "L43", "L44",
        "L49", "L50", "L51", "L52", "L53", "L59", "L60", "L61", "L62",
        "L63", "L64", "L65", "L66", "L67", "L68", "L69", "L70", "L71",
        "L72", "L73", "L74", "L78", "L79", "L80", "L81", "L82", "L83",
        "L84", "L85", "L86", "L87", "L88", "L89", "L90", "L91", "L92",
        "L93", "L94", "L95", "L96", "L97", "L98", "L99", "M00", "M10",
        "M11", "M12", "M13", "M14", "M15", "M16", "M19", "M20", "M21",
        "M29", "M30", "M31", "M37", "M38", "M39", "M40", "M41", "M42",
        "M48", "M49", "M50", "M51", "M52", "M53", "M54", "M55", "M59",
        "N00", "N01", "N10", "N11", "N12", "N13", "N14", "N15", "N16",
        "N17", "N20", "N21", "N22", "N23", "N24", "N25", "N26", "N27",
        "N30", "N31", "N32", "N33", "N34", "N35", "N36", "N37", "N40",
        "N41", "N42", "N43", "N44", "N45", "N46", "N47", "N50", "N51",
        "N52", "N53", "N54", "N55", "N56", "N57", "N60", "N61", "N62",
        "N63", "N64", "N65", "N66", "N67", "N70", "N71", "N72", "N73",
        "N74", "N75", "N76", "N77", "N80", "N81", "N82", "N83", "N84",
        "N85", "N86", "N87", "N90", "N91", "N92", "N93", "N94", "N95",
        "N96", "N97", "O00", "O10", "O11", "O12", "O13", "O14", "O15",
        "O16", "O17", "O18", "O19", "O20", "O21", "O22", "O23", "O24",
        "O25", "O29", "O30", "O31", "O32", "O33", "O34", "O35", "O36",
        "O38", "O39", "O40", "O41", "O42", "O43", "O44", "O47", "O49",
        "O50", "O51", "O52", "O53", "O54", "O55", "O56", "O57", "P00",
        "P10", "P11", "P12", "P13", "P14", "P16", "P17", "P18", "P19",
        "P20", "P21", "P22", "P23", "P24", "P25", "P26", "P27", "P28",
        "P29", "P30", "P31", "P32", "P33", "P34", "P35", "P36", "P37",
        "P39", "P40", "P41", "P42", "P43", "P44", "P45", "P46", "P47",
        "P48", "P49", "P50", "P51", "P52", "P59", "Q00", "Q01", "Q02",
        "Q10", "Q11", "Q12", "Q13", "Q14", "Q15", "Q16", "Q17", "Q18",
        "Q19", "Q20", "Q21", "Q22", "Q23", "Q24", "Q25", "Q26", "Q27",
        "Q28", "Q29", "Q30", "Q31", "Q32", "Q33", "Q34", "Q35", "Q37",
        "Q38", "Q39", "Q40", "Q41", "Q42", "Q43", "Q47", "Q48", "Q49",
        "Q50", "Q51", "Q52", "Q53", "Q54", "Q55", "Q56", "Q57", "Q58",
        "Q59", "R00", "R10", "R11", "R12", "R13", "R14", "R15", "R19",
        "R20", "R21", "R22", "R23", "R28", "R29", "R30", "R31", "R32",
        "R33", "R38", "R39", "R40", "R41", "R42", "R48", "R49", "R50",
        "R51", "R52", "R53", "R58", "R59", "Y10", "Y20", "Y30", "Y40",
        "Y50", "Y60", "Y70", "Y80", "Y90", "Y91", "Y92", "Z00", "Z10",
        "Z11", "Z12", "Z13", "Z18", "Z19", "Z20", "Z21", "Z22", "Z23",
        "Z28", "Z29", "Z30", "Z31", "Z32", "Z33", "Z38",
        "Z39", // top-level categories
        "A0", "A1", "A2", "A3", "B0", "B1", "B2", "B3", "B4", "B5",
        "C0", "C1", "C2", "C3", "C4", "C5", "C6", "C7", "C8", "C9",
        "D0", "D1", "D2", "D3", "D4", "D5", "D6", "D7", "D8", "D9",
        "E0", "E1", "E2", "E3", "E4", "E5", "E6", "E7", "F0", "F1",
        "F2", "F3", "F4", "F5", "F6", "G0", "G1", "G2", "G3", "G4",
        "G5", "H0", "H1", "H2", "H3", "H4", "H5", "H6", "H7", "H8",
        "I0", "I1", "I2", "I3", "J0", "J1", "J2", "J3", "J4", "J5",
        "J6", "J7", "J8", "K0", "K1", "K2", "K3", "K4", "L0", "L1",
        "L2", "L3", "L4", "L5", "L6", "L7", "L8", "L9", "M0", "M1",
        "M2", "M3", "M4", "M5", "N0", "N1", "N2", "N3", "N4", "N5",
        "N6", "N7", "N8", "N9", "O0", "O1", "O2", "O3", "O4", "O5",
        "P0", "P0", "P1", "P2", "P3", "P4", "P5", "Q0", "Q1", "Q2",
        "Q3", "Q4", "Q5", "R0", "R1", "R2", "R3", "R4", "R5", "Y1",
        "Y2", "Y3", "Y4", "Y5", "Y6", "Y7", "Y8", "Y9", "Z1", "Z2",
        "Z3",
    ])
});

impl Jel {
    pub(crate) fn check(
        &self,
        record: &ByteRecord,
    ) -> (bool, Option<String>) {
        let options = MatcherOptions::new()
            .strsim_threshold(self.strsim_threshold)
            .case_ignore(self.case_ignore);

        let message = record
            .path(&self.path, &options)
            .filter(|value| !CODES.contains(value.as_bstr()))
            .map(ToString::to_string)
            .collect::<Vec<_>>()
            .join(", ");

        if !message.is_empty() {
            (true, Some(message))
        } else {
            (false, None)
        }
    }
}
