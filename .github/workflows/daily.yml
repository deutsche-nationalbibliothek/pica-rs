name: Daily

on:
  workflow_dispatch:
  schedule:
    - cron: '10 10  * * *'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  CARGO_TERM_COLOR: always
  RUSTUP_MAX_RETRIES: 10
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

permissions:
  contents: read

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      matrix:
        target:
          - { os: ubuntu-latest, toolchain: stable, triple: x86_64-unknown-linux-gnu }
          - { os: ubuntu-latest, toolchain: beta, triple: x86_64-unknown-linux-gnu }
          - { os: ubuntu-latest, toolchain: nightly, triple: x86_64-unknown-linux-gnu }
          - { os: ubuntu-latest, toolchain: "1.85.0", triple: x86_64-unknown-linux-gnu }
          - { os: windows-latest, toolchain: stable, triple: i686-pc-windows-msvc }
          - { os: windows-latest, toolchain: stable, triple: i686-pc-windows-gnu }
          - { os: macos-latest, toolchain: stable, triple: x86_64-apple-darwin }
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.target.toolchain }}
          targets: ${{ matrix.target.triple }}
      - uses: taiki-e/install-action@nextest
      - uses: Swatinem/rust-cache@v2
      - name: Run tests
        if: ${{ matrix.target.toolchain != 'nightly' }}
        run: |
            cargo nextest run --workspace -F performant,compat,unstable --profile ci
            cargo test --doc --workspace --features performant,compat,unstable --no-fail-fast
      - name: Run tests (nightly)
        if: ${{ matrix.target.toolchain == 'nightly' }}
        run: |
            cargo nextest run --workspace --all-features --profile ci
            cargo test --doc --workspace --all-features --no-fail-fast

  cross:
    runs-on: ${{ matrix.target.os }}
    strategy:
      fail-fast: false
      matrix:
        target:
          - { os: ubuntu-latest, toolchain: stable, triple: x86_64-unknown-linux-musl }
          - { os: ubuntu-latest, toolchain: stable, triple: aarch64-unknown-linux-gnu }
          - { os: ubuntu-latest, toolchain: stable, triple: aarch64-unknown-linux-musl }
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.target.toolchain }}
          targets: ${{ matrix.target.triple }}
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cross
      - run: |
          cross clean # see https://github.com/cross-rs/cross/issues/724
          cross build --target ${{ matrix.target.triple }}

  clippy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy
      - uses: Swatinem/rust-cache@v2
      - run: cargo clippy --workspace --all-features

  outdated:
    runs-on: ubuntu-latest
    continue-on-error: true
    timeout-minutes: 15
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo install --locked cargo-outdated
      - run: cargo update
      - run: cargo outdated --workspace --root-deps-only --exit-code 1

  careful:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
      - uses: Swatinem/rust-cache@v2
      - run: cargo install cargo-careful
      - run: cargo careful test --workspace --all-features

  miri:
    runs-on: ubuntu-latest
    timeout-minutes: 180
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@miri
      - uses: Swatinem/rust-cache@v2
      - uses: taiki-e/install-action@nextest
      - run: cargo miri nextest run --workspace --lib -F compat,performant,unstable --profile ci
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-disable-isolation
      - run: cargo miri test --workspace --doc -F compat,performant,unstable
        env:
          MIRIFLAGS: -Zmiri-strict-provenance -Zmiri-disable-isolation

  deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - bans licenses sources
          - advisories
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@v4
    - uses: EmbarkStudios/cargo-deny-action@v2
      with:
        command: check ${{ matrix.checks }}
        arguments: --workspace --all-features
        command-arguments: -c .deny.toml
        rust-version: stable

  audit:
    runs-on: ubuntu-latest
    # needs: test
    permissions:
      checks: write
      contents: read
      issues: write
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - run: cargo update
      - uses: rustsec/audit-check@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  daily:
    runs-on: ubuntu-latest
    needs:
      - audit
      - careful
      - clippy
      - cross
      - deny
      - miri
      - outdated
      - test
    steps:
      - run: exit 0
