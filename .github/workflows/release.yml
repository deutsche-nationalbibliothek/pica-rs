on:
  push:
    tags:
    - 'v*'

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.draft_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get the release version from the tag
        id: get_version
        run: |
          echo ::set-output name=version::${GITHUB_REF/refs\/tags\/v/}
      - name: Draft release
        id: draft_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.get_version.outputs.version }}"
          release_name: Pica ${{ steps.get_version.outputs.version }}
          draft: true

  build_release:
    name: Build Binary (${{ matrix.target }})
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, win-gnu, win-msvc]
        include:
          - build: linux
            os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
          - build: macos
            os: macos-latest
            rust: stable
            target: x86_64-apple-darwin
          - build: win-gnu
            os: windows-2019
            rust: stable
            target: x86_64-pc-windows-gnu
          - build: win-msvc
            os: windows-2019
            rust: stable
            target: i686-pc-windows-msvc
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target }}
          profile: minimal
          override: true

      - name: Build release binary
        run: cargo build --release

      - name: Strip release binary
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/release/pica"

      - name: Build archive
        shell: bash
        run: |
          staging="pica-${{ needs.create_release.outputs.version }}-${{ matrix.target }}"
          mkdir "$staging"
          cp README.md "$staging/"

          mkdir "$staging"/complete
          target/release/pica completion fish -o "$staging"/complete/pica.fish
          target/release/pica completion bash -o "$staging"/complete/pica.bash
          target/release/pica completion zsh -o "$staging"/complete/pica.zsh

          if [ "${{ matrix.os }}" = "windows-2019" ]; then
            cp "target/release/pica.exe" "$staging/"
            7z a "$staging.zip" "$staging"
            echo "ASSET=$staging.zip" >> $GITHUB_ENV
          else
            cp "target/release/pica" "$staging/"
            tar cfvz "$staging.tar.gz" "$staging/"
            echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_content_type: application/octet-stream
          asset_path: ${{ env.ASSET }}
          asset_name: ${{ env.ASSET }}
          
